import java.util.*;
class Solution {
    static List<List<Integer>> ls = new ArrayList<>();
    static boolean[] visit;
    static int m;
    public int solution(int n, int[][] wires) {
        for(int i=0; i<=n; i++){
            ls.add(new ArrayList<>()); 
        };
        
        m = wires.length;
        for(int i=0; i<m; i++){
            int a=wires[i][0];
            int b=wires[i][1];
            ls.get(a).add(b);
            ls.get(b).add(a);
        }//map 
        int gap=n;
        for(int i=0; i<m; i++){
            int a = ls.get(wires[i][0]).indexOf(wires[i][1]);
            int b = ls.get(wires[i][1]).indexOf(wires[i][0]);
            ls.get(wires[i][0]).remove(a);
            ls.get(wires[i][1]).remove(b);
            
            visit = new boolean[n+1];
            int k = BFS(1,0); //트리구조기 때문에 아무 인덱스로 시작해도 결과는 같음 -> 고정값 1로 bfs탐색
            int tmp = Math.abs((n-k)-k); // n개의 노드에서 k개를 탐색, 전력망을 두 개로 나누기 때문에 k개와 (n-k)개로 나뉨. 두 개의 차이를 최소화하는 값을 찾는 것이기 때문에 절댓값으로 계산
            if(gap>tmp) gap=tmp;
            
            ls.get(wires[i][0]).add(wires[i][1]);
            ls.get(wires[i][1]).add(wires[i][0]);
        }
        
        return gap;
    }
    static int BFS(int start, int cnt){
        Queue<Integer> q = new LinkedList<>();
        q.add(start);
        while(!q.isEmpty()) {
            int k = q.poll();
            visit[k] = true;
            cnt++;
            for(int i=0; i<ls.get(k).size(); i++){
                int chk = ls.get(k).get(i);
                if(!visit[chk]){
                    q.add(chk);
                }
            }
        }       
        return cnt;
    }
}
