import java.io.*;
import java.util.*;

public class Main {
  static int n,m,answer;
  static int[][] map;
  static boolean[][] visit;
  static int[] dx={0,0,1,-1};
  static int[] dy={1,-1,0,0};
  static Point[] target;
    public static void main(String[] args) throws IOException{
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
      StringTokenizer st = new StringTokenizer(br.readLine());
      n=Integer.parseInt(st.nextToken());
      m=Integer.parseInt(st.nextToken());
      map = new int[n][n];
      visit = new boolean[n][n];
      for(int i=0; i<n; i++){
         st = new StringTokenizer(br.readLine());
        for(int j=0; j<n; j++){
          map[i][j] = Integer.parseInt(st.nextToken());
        }
      }
      target = new Point[m];
      for(int i=0; i<m; i++){
        st = new StringTokenizer(br.readLine());
        int a = Integer.parseInt(st.nextToken())-1;
        int b = Integer.parseInt(st.nextToken())-1;
        target[i] = new Point(a,b);
      }
      answer=0;
      visit[target[0].x][target[0].y]=true;
      route(target[0].x,target[0].y,0);
      System.out.print(answer);
      
    }
  static void route(int x,int y,int depth){
    if(x==target[depth].x&&y==target[depth].y){
      if(depth==m-1){
        answer++;
        return;
      }else{
        depth++;
      }
    }
    for(int i=0; i<4; i++){
      int nx=x+dx[i];
      int ny=y+dy[i];
      if(nx>=0&&ny>=0&&nx<n&&ny<n&&map[nx][ny]==0&&!visit[nx][ny]){
        visit[nx][ny]=true;
        route(nx,ny,depth);
        visit[nx][ny]=false;
      }
    }
  }
}
class Point{
  int x,y;
  Point(int x, int y){
    this.x=x;
    this.y=y;
  }
}